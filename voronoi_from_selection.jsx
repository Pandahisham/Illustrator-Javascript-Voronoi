//  voronoi_from_selection.jsx//  draws voronoi diagrams in illustrator//  using the javascript port from//  gorhill --> https://github.com/gorhill //  you can find the code here://  https://github.com/gorhill/Javascript-Voronoi//  under the same license as this one//  the illustrator usage can be found here://  https://github.com/fabiantheblind/Javascript-Voronoi//  the direct download is here: //  https://github.com/fabiantheblind/Javascript-Voronoi/zipball/master//~ Copyright (c)  2012 Fabian "fabiantheblind" Morón Zirfas//~ Permission is hereby granted, free of charge, to any person obtaining a copy of this//~ software and associated documentation files (the "Software"), to deal in the Software //~ without restriction, including without limitation the rights to use, copy, modify, //~ merge, publish, distribute, sublicense, and/or sell copies of the Software, and to //~ permit persons to whom the Software is furnished to do so, subject to the following //~ conditions://~ The above copyright notice and this permission notice shall be included in all copies //~ or substantial portions of the Software.//~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, //~ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A //~ PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT //~ HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF //~ CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE //~ OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.//~ see also http://www.opensource.org/licenses/mit-license.php#include "rhill-voronoi-core.js"var DEBUG = false;main();function main(){var sites;// will be filled with pointserror0 = "Please open a document";error1 = "Please select at least one non-compound path item";error2 = "Please release all groups and compound path items";if ( app.documents.length == 0 ) {  alert(error0);return;}var doc = app.activeDocument;if (doc.selection.length == 0){  alert(error1);  return;}// ------------ set the ruler origin ------------var rulerPrefVal = app.preferences.getBooleanPreference("isRulerOriginTopLeft");app.preferences.setBooleanPreference ("isRulerOriginTopLeft",true);redraw();// ------------ loop thru selection ------------for (var i = doc.selection.length-1; i >= 0; i--) {  var theSelItem = doc.selection[i]; // if (app.activeDocument.selection[i].typename != "PathItem"){  // alert(alert1);  // ------------ Group items processing ------------  if(theSelItem.typename == "GroupItem"){    alert(error2);    return;  };// ------------ Compound Path items processing ------------  if(theSelItem.typename=="CompoundPathItem"){    alert("This is a compund path");       release_oneCP(doc, theSelItem);  }// ------------ TextFrame item processing ------------  if(theSelItem.typename=="TextFrame"){    alert("this is a textframe");    var aLyr = doc.activeLayer;    var dup_lyr = doc.layers.add();    dup_lyr.name = "duplicate";    var dup = theSelItem.duplicate(dup_lyr,ElementPlacement.PLACEATEND);     var it = dup.createOutline();     //ungroup     // loop or while     release_TextCP(doc, it);     var sites = get_pathPoints(dup_lyr);     alert(sites.toSource());  }  };// end of i looptry{      aLyr.locked = true;    aLyr.visible = false;    }catch(e){}  // this is the basic example by gorhill  // var sites = [{x:300,y:300}, {x:100,y:100}, {x:200,y:500}, {x:250,y:450}, {x:500,y:150}];  // xl, xr means x left, x right  // yt, yb means y top, y bottom  var bbox = {xl:0, xr:doc.width, yt:0, yb:doc.height};  // pass an object which exhibits xl, xr, yt, yb properties. The bounding  // box will be used to connect unbound edges, and to close open cells        // var sites = get_pathPoints(doc);    var voronoi = new Voronoi();    result = voronoi.compute(sites, bbox);    var lyr = doc.layers.add();     doc.layers[1].locked = true;    doc.layers[1].visible = false;//~   //~ var doc = app.documents.add(//~                 DocumentColorSpace.RGB,//~                 cm2pt (80),//~                 cm2pt (60),//~                 1,//~                 DocumentArtboardLayout.GridByRow,//~                 20.0,//~                 3);//~  draw_cells (result); draw_edges (doc, result); // ------------ restore the ruler preferences ------------app.preferences.setBooleanPreference ("isRulerOriginTopLeft",rulerPrefVal);}      function draw_edges(doc, result){         var edges = new Array();for(var i in result.edges){     var pt = new Array();  var va = new Array(result.edges[i].va.x, result.edges[i].va.y);  var vb = new Array(result.edges[i].vb.x, result.edges[i].vb.y);  pt.push(new Array(va[0],va[1]));  pt.push(new Array(vb[0],vb[1]));  edges.push({"path":pt});  }for(var k in edges){var path = doc.pathItems.add();redraw();  path.setEntirePath(edges[k].path);  }var diam = 3;for(var l in result.cells){    var top = -result.cells[l].site.y;    var left = result.cells[l].site.x;    redraw();        var ell = doc.pathItems.ellipse( -top + diam/2, left -diam/2, diam, diam, true,true );    }}function cm2pt(val){    var result = val * 28.346;    return result;    }function get_pathPoints(lyr){    // var sites = [{x:300,y:300}, {x:100,y:100}, {x:200,y:500}, {x:250,y:450}, {x:500,y:150}];  var list = new Array();  for(var j = 0; j < lyr.pathItems.length;j++){    var path = lyr.pathItems[j];    var points = path.pathPoints;  for (var i = 0; i < points.length; i++) {    var p = points[i];    var a = p.anchor;    var px = a[0];    var py = a[1];     list.push({x:px,y:py});  };}return list;}// ------------ release compound Paths ------------// maybee try this// http://forums.adobe.com/message/2140054function release(doc){while(doc.compoundPathItems.length > 0){  try{release_compoundPath(doc);}catch(e){alert(e);}  }}function release_compoundPath(doc){  redraw();var cp = doc.compoundPathItems[0];var p = cp.pathItems[0];  p.move(doc, ElementPlacement.PLACEATEND);}// ------------ release text compound paths ------------function release_TextCP(doc, item){while(item.compoundPathItems.length > 0){  var cp = item.compoundPathItems[0];  try{ release_one_compoundPath(doc, cp); }catch(e){if(DEBUG)alert(e);}}  }function release_one_compoundPath(doc, cp){  redraw();var this_cp = cp;var p = this_cp.pathItems[0];  p.move(doc, ElementPlacement.PLACEATEND);}// ------------ insept properties and methods ------------// the functions below are// by Peter the Magnificant Kahrel// http://www.kahrel.plus.com/indesign/scriptui.html// look under "Displaying properties and methods"function  util_inspect_properties (f) {$.writeln (f.reflect.name);var props = f.reflect.properties;var array = [];for (var i = 0; i < props.length; i++)try {array.push (props[i].name + ": " + f[props[i].name])} catch (_){} array.sort ();$.writeln (array.join ("\r"));}function util_inspect_methods (m) {var props = m.reflect.methods.sort(); $.writeln ("\rMethods");for (var i = 0; i < props.length; i++)$.writeln (props[i].name);}// ------------ ------------